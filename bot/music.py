import yt_dlp
from yt_dlp.utils import DownloadError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import asyncio
from concurrent.futures import ThreadPoolExecutor
import time
import json
import os
import logging
from functools import lru_cache

from bot.config import API_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt_dlp —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ MP3
YDL_OPTS = {
    'format': 'bestaudio/best',
    'outtmpl': 'downloads/%(title)s.%(ext)s',
    'quiet': True,
    'socket_timeout': 200,
    'noplaylist': True,
    'extract_flat': True,
    'cachedir': './cache',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }]
}

# –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
download_queue = asyncio.Queue()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {}
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

translations = {}

for lang in ['ru', 'en', 'kk']:
    file_path = os.path.join(os.getcwd(), "lang", f"{lang}.json")
    if os.path.exists(file_path):
        logger.info(f'File found: {file_path}')
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                translations[lang] = json.load(f)
        except json.JSONDecodeError:
            logger.error(f'Error decoding JSON in {file_path}')
            translations[lang] = {}
    else:
        logger.warning(f'File not found: {file_path}')
        translations[lang] = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def get_translation(context, key, **kwargs):
    language_code = context.user_data.get('language', 'ru')
    translation = translations[language_code].get(key, key)
    return translation.format(**kwargs)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
active_users = set()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    global active_users
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            active_users = set(json.load(f))
    except FileNotFoundError:
        active_users = set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Ñ–∞–π–ª
def save_users():
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(list(active_users), f)

# Simple in-memory cache for search queries and downloads
search_cache = {}
download_cache = {}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@lru_cache(maxsize=100)
def get_search_results(query):
    with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
        result = ydl.extract_info(f"ytsearch30:{query}", download=False)
        if 'entries' in result:
            return [video for video in result['entries'] if video.get('duration') is not None and video['duration'] <= 600]
        return []

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def get_cached_file_path(video):
    return os.path.join('downloads', f"{video['id']}.mp3")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if user_id not in active_users:
        active_users.add(user_id)
        save_users()

    language_buttons = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="set_language_en")],
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="set_language_kk")]
    ]
    reply_markup = InlineKeyboardMarkup(language_buttons)
    await update.message.reply_text(get_translation(context, "choose_language"), reply_markup=reply_markup)

# –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def search_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not update.message or not update.message.text:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ)

    query = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('is_searching', False):
        await update.message.reply_text(get_translation(context, "already_searching"))
        return

    if not query:
        await update.message.reply_text(get_translation(context, "empty_query"))
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–∏—Å–∫ –Ω–∞—á–∞—Ç
    context.user_data['is_searching'] = True

    await update.message.reply_text(get_translation(context, "searching", query=query))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if query in search_cache:
        search_results = search_cache[query]
    else:
        search_results = get_search_results(query)
        search_cache[query] = search_results

    if not search_results:
        await update.message.reply_text(get_translation(context, "no_results"))
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        context.user_data.pop('is_searching', None)
        return

    context.user_data['search_results'] = search_results
    context.user_data['page'] = 0
    await send_results_page(update, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
async def send_results_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    search_results = context.user_data.get('search_results', [])
    page = context.user_data.get('page', 0)

    start_idx = page * 5
    end_idx = start_idx + 5
    results_page = search_results[start_idx:end_idx]

    if not results_page:
        await update.callback_query.message.edit_text(get_translation(context, "no_more_results"))
        return

    buttons = []
    for idx, video in enumerate(results_page, start=start_idx + 1):
        buttons.append([InlineKeyboardButton(
            text=f"{idx}. {video['title']} ({video.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–µ–∫.)",
            callback_data=f"select_{idx}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(get_translation(context, "back"), callback_data="prev_page"))
    if end_idx < len(search_results):
        nav_buttons.append(InlineKeyboardButton(get_translation(context, "next"), callback_data="next_page"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    cancel_button = InlineKeyboardButton(get_translation(context, "cancel"), callback_data="cancel_search")
    buttons.append([cancel_button])

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if nav_buttons:
        buttons.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(buttons)

    if update.message:
        await update.message.reply_text(get_translation(context, "choose_option"), reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text(get_translation(context, "choose_option"),
                                                      reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_search":
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∏—Å–∫–µ
        context.user_data.clear()
        await query.edit_message_text(get_translation(context, "search_cancelled"))
        return

    if query.data in ["prev_page", "next_page"]:
        if 'page' not in context.user_data:
            context.user_data['page'] = 0

        if query.data == "next_page":
            context.user_data['page'] += 1
        elif query.data == "prev_page":
            context.user_data['page'] -= 1

        await send_results_page(update, context)
        return

    if query.data.startswith("select_"):
        choice = int(query.data.split('_')[1]) - 1
        search_results = context.user_data.get('search_results', [])

        if 0 <= choice < len(search_results):
            video = search_results[choice]
            webpage_url = video.get('url') or video.get('webpage_url')

            if not webpage_url:
                await query.edit_message_text(get_translation(context, "download_error"))
                return

            current_message_text = query.message.text
            new_message_text = get_translation(context, "download", title=video['title'])

            if current_message_text != new_message_text:
                await query.edit_message_text(new_message_text)

            await download_queue.put((update, context, video, webpage_url))

            if download_queue.qsize() == 1:
                asyncio.create_task(process_download_queue())

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
async def process_download_queue():
    while not download_queue.empty():
        update, context, video, webpage_url = await download_queue.get()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        cached_file_path = get_cached_file_path(video)
        if os.path.exists(cached_file_path):
            with open(cached_file_path, 'rb') as audio_file:
                await update.callback_query.message.reply_audio(audio=audio_file, title=video['title'])
            os.remove(cached_file_path)
        else:
            with ThreadPoolExecutor() as executor:
                loop = asyncio.get_event_loop()
                try:
                    info = await loop.run_in_executor(executor, lambda: yt_dlp.YoutubeDL(YDL_OPTS).extract_info(webpage_url, download=True))
                    file_path = yt_dlp.YoutubeDL(YDL_OPTS).prepare_filename(info).replace(info['ext'], 'mp3')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã
                    retry_attempts = 5
                    while retry_attempts > 0:
                        try:
                            with open(file_path, 'rb') as audio_file:
                                await update.callback_query.message.reply_audio(audio=audio_file, title=info.get('title'))
                            os.rename(file_path, cached_file_path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                        except PermissionError:
                            retry_attempts -= 1
                            time.sleep(1)  # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

                    if retry_attempts == 0:
                        await update.callback_query.edit_message_text(get_translation(context, "download_error", error="File is in use"))

                    await update.callback_query.edit_message_text(get_translation(context, "downloaded"))

                except DownloadError as e:
                    await update.callback_query.edit_message_text(get_translation(context, "download_error", error=e))

        download_queue.task_done()
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        context.user_data.pop('search_results', None)
        context.user_data.pop('page', None)
        context.user_data.pop('is_searching', None)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Placeholder logic for stats, for example, showing the number of active users.
    active_user_count = len(active_users)
    await update.message.reply_text(f"Active users: {active_user_count}")

# Function to set language
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # Get language code from callback data
    language_code = query.data.split('_')[-1]

    # Save language in user data
    context.user_data['language'] = language_code

    # Send a message about language change
    await query.edit_message_text(get_translation(context, "language_changed"))

    # Greet the user in the selected language
    await query.message.reply_text(get_translation(context, 'greeting'))

# Main function
def main():
    # Load user data
    load_users()

    application = Application.builder().token(API_TOKEN).build()

    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(set_language, pattern="^set_language_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_music))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # Run the bot
    application.run_polling()

if __name__ == '__main__':
    main()
