# main.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Union, Optional

from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Update
from aiogram.exceptions import TelegramNetworkError

from bot.handlers.start_handler import start
from bot.handlers.video_handler import (
    handle_link,
    download_and_send_wrapper,
    current_links,
    downloading_status,
)
from bot.utils.log import log_action
from bot.utils.tor_port_manager import initialize_all_ports_once
# import –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±—É–¥—É—â–µ–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ä—Ç –ª–∏—à–Ω–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏)
# from bot.utils.video_info import get_video_info_with_cache
from config import bot, dp, CHANNEL_IDS  # —Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ


# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)


# -------------------------------------------------------------------
# –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û config.py
# -------------------------------------------------------------------
# 1) –°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã CHANNEL_IDS –±—ã–ª —Å–ø–∏—Å–∫–æ–º –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†–û–í –ö–ê–ù–ê–õ–û–í
#    –∏–ª–∏ @username. –ü—Ä–∏–º–µ—Ä—ã:
#    CHANNEL_IDS = [-1001234567890, "@my_public_channel"]
# 2) –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º (—Å –ø—Ä–∞–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å).
#    –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî —É–∫–∞–∂–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Ä—É–∫–∞–º–∏ –≤ CHANNEL_LINKS:
#    CHANNEL_LINKS = {
#        -1001234567890: "https://t.me/+STATIC_INVITE_CODE",
#        "@my_public_channel": "https://t.me/my_public_channel"
#    }
# 3) –ï—Å–ª–∏ –≤—ã –ù–ï –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω), –≤—ã—Å—Ç–∞–≤—å—Ç–µ:
#    REQUIRE_SUBSCRIPTION = False
#    –¢–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ ¬´–∂—ë—Å—Ç–∫–æ–π¬ª –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –º–æ–∂–Ω–æ.
# -------------------------------------------------------------------

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ config.py
try:
    from config import CHANNEL_LINKS  # dict[Union[int,str], str]
except Exception:
    CHANNEL_LINKS = {}

try:
    from config import REQUIRE_SUBSCRIPTION  # bool
except Exception:
    REQUIRE_SUBSCRIPTION = True


# -------------------- ERROR HANDLER --------------------
from aiogram import Router
router_sys = Router()


@router_sys.errors()
async def _errors_handler(update: Update, exception: Exception):
    logging.exception("Unhandled error: %r", exception)
    log_action("dp_error", repr(exception))
    # –≤–µ—Ä–Ω—É—Ç—å True, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
    return True


dp.include_router(router_sys)


# -------------------- –ü–æ–¥–ø–∏—Å–∫–∏ --------------------
# –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫
user_subscription_cache: dict[int, tuple[datetime, bool]] = {}  # user_id -> (last_check_dt, bool)


def _chat_display_title(chat: types.Chat) -> str:
    return chat.title or chat.username or str(chat.id)


async def _safe_get_invite_link(chat_id: Union[int, str]) -> Optional[str]:
    """
    –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω ‚Äî –≤–µ—Ä–Ω—ë–º None.
    –î–ª—è public @username —Ñ–æ—Ä–º–∏—Ä—É–µ–º t.me/username.
    –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö ‚Äî –±–µ—Ä—ë–º –∏–∑ CHANNEL_LINKS (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ).
    """
    # –°–Ω–∞—á–∞–ª–∞ —è–≤–Ω—ã–π –æ–≤–µ—Ä—Ä–∞–π–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if chat_id in CHANNEL_LINKS:
        return CHANNEL_LINKS[chat_id]

    # –ï—Å–ª–∏ —ç—Ç–æ @username ‚Äî –º–æ–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
    if isinstance(chat_id, str) and chat_id.startswith("@"):
        return f"https://t.me/{chat_id.lstrip('@')}"

    # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ API (–Ω—É–∂–Ω–æ –ø—Ä–∞–≤–æ –∞–¥–º–∏–Ω–∞)
    try:
        chat = await bot.get_chat(chat_id)
        # –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π (–µ—Å—Ç—å username)
        if chat.username:
            return f"https://t.me/{chat.username}"

        # –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –ø—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞)
        invite_link = await chat.export_invite_link()
        return invite_link
    except Exception as e:
        # –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –ø—É—Å—Ç—å —Å—Å—ã–ª–∫–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ CHANNEL_LINKS
        log_action("Invite link error", f"{chat_id}: {e}")
        return None


async def _is_member(chat_id: Union[int, str], user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False,
    –Ω–æ –Ω–µ –≤–∞–ª–∏–º –±–æ—Ç–∞.
    """
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        # –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω/–∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π), –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ—à–∞–µ–º —Ñ–ª–∞–≥–æ–º
        log_action("get_chat_member error", f"chat={chat_id}, user={user_id}, err={e}")
        return not REQUIRE_SUBSCRIPTION  # –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º


async def check_subscription(user_id: int, force_check: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ CHANNEL_IDS.
    –ï—Å–ª–∏ REQUIRE_SUBSCRIPTION = False ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    try:
        if not force_check and user_id in user_subscription_cache:
            last_check, status = user_subscription_cache[user_id]
            if datetime.now() - last_check < timedelta(minutes=10):
                return status

        # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî —Å—á–∏—Ç–∞–µ–º ¬´–ø–æ–¥–ø–∏—Å–∞–Ω¬ª
        if not CHANNEL_IDS:
            user_subscription_cache[user_id] = (datetime.now(), True)
            return True

        for channel_id in CHANNEL_IDS:
            if not await _is_member(channel_id, user_id):
                user_subscription_cache[user_id] = (datetime.now(), False)
                return False

        user_subscription_cache[user_id] = (datetime.now(), True)
        return True
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", f"User {user_id}: {e}")
        # –ù–µ –≤–∞–ª–∏–º –±–æ—Ç ‚Äî —Ä–µ—à–∞–µ–º –ø–æ —Ñ–ª–∞–≥—É
        return not REQUIRE_SUBSCRIPTION


async def send_subscription_reminder(user_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª (—É—Å—Ç–æ–π—á–∏–≤–æ, –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ export_invite_link).
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–æ–π, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ä—è–¥.
    """
    try:
        rows: List[List[InlineKeyboardButton]] = []
        for channel_id in CHANNEL_IDS:
            # –ü–æ–¥–ø–∏—Å—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
            try:
                chat = await bot.get_chat(channel_id)
                title = _chat_display_title(chat)
            except Exception:
                title = str(channel_id)

            # –°—Å—ã–ª–∫–∞
            link = await _safe_get_invite_link(channel_id)
            if not link:
                # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
                log_action("No link for channel", f"{channel_id}")
                continue

            rows.append([InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {title}", url=link)])

        # –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏¬ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        rows.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        await bot.send_message(
            user_id,
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", f"User {user_id}: {e}")


# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await check_subscription(user_id, force_check=True):
        await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        await send_subscription_reminder(user_id)


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return
    await start(message)


@dp.message(Command("ping"))
async def ping(message: types.Message):
    await message.answer("pong")


@dp.message(F.text.startswith("http"))
async def handle_url(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return
    await handle_link(message)


@dp.callback_query(lambda c: c.data.startswith("quality_"))
async def video_quality_callback(callback_query: types.CallbackQuery):
    if not await check_subscription(callback_query.from_user.id, force_check=True):
        await send_subscription_reminder(callback_query.from_user.id)
        return

    data = callback_query.data.replace("quality_", "")
    if data == "audio":
        download_type = "audio"
        quality = "0"
    else:
        download_type = "video"
        quality = data.replace("p", "")

    url = current_links.pop(callback_query.from_user.id, None)
    if not url:
        await callback_query.message.edit_text("‚ùå –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    asyncio.create_task(download_and_send_wrapper(
        user_id=callback_query.from_user.id,
        url=url,
        download_type=download_type,
        quality=quality
    ))


@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_download(call: CallbackQuery):
    user_id = call.from_user.id
    downloading_status[user_id] = "cancelled"
    await call.message.edit_text("üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# -------------------- –£—Ç–∏–ª–∏—Ç—ã —Å—Ç–∞—Ä—Ç–∞ --------------------
async def wait_bot_api_ready(bot_, attempts: int = 20):
    for i in range(attempts):
        try:
            me = await bot_.get_me()
            logging.info("Bot connected: @%s (id=%s)", me.username, me.id)
            return
        except TelegramNetworkError as e:
            logging.warning("Bot API not ready (%s), retry %d/%d", e, i + 1, attempts)
            await asyncio.sleep(1 + 0.5 * i)
    raise RuntimeError("Telegram Bot API server is not ready")


# -------------------- –ó–∞–ø—É—Å–∫ --------------------
async def main():
    # –ù–ò–ß–ï–ì–û —Ç—è–∂—ë–ª–æ–≥–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–ª–ª–∏–Ω–≥–∞!
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.
    try:
        proxy_ports = [9050]  # –∏–ª–∏ –∏–∑ ENV/–∫–æ–Ω—Ñ–∏–≥–∞
        test_url = None       # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî —É–∫–∞–∂–∏—Ç–µ direct URL; None —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        if test_url:
            asyncio.create_task(initialize_all_ports_once(test_url, proxy_ports))
    except Exception as e:
        log_action("init tor ports error", str(e))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    asyncio.create_task(subscription_check_task())

    # –ï—Å–ª–∏ –±—ã–ª webhook ‚Äî —É–¥–∞–ª—è–µ–º, –∏–Ω–∞—á–µ polling –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook deleted (drop_pending_updates=True)")
    except Exception as e:
        logging.warning("delete_webhook failed: %s", e)

    # –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Bot API (–∞–∫—Ç—É–∞–ª—å–Ω–æ –∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ, –∏ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ)
    await wait_bot_api_ready(bot)

    log_action("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "start_polling")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
