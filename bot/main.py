import asyncio
from datetime import datetime, timedelta

import requests
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.handlers.start_handler import start
from bot.handlers.video_handler import handle_link, handle_quality_selection
from bot.utils.YtDlpDownloader import YtDlpDownloader
from bot.utils.log import log_action
from bot.utils.video_info import check_ffmpeg_installed, get_video_info_with_cache, extract_url_from_info
from config import bot, dp, CHANNEL_IDS  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CHANNEL_IDS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ config.py

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
user_subscription_cache = {}

async def check_subscription(user_id: int, force_check: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param force_check: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–µ—à)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not force_check and user_id in user_subscription_cache:
            last_check, status = user_subscription_cache[user_id]
            if datetime.now() - last_check < timedelta(minutes=10):
                return status

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_id in CHANNEL_IDS:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                user_subscription_cache[user_id] = (datetime.now(), False)
                return False

        user_subscription_cache[user_id] = (datetime.now(), True)
        return True
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", f"User {user_id}: {str(e)}")
        return False

async def send_subscription_reminder(user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        buttons = []
        for channel_id in CHANNEL_IDS:
            chat = await bot.get_chat(channel_id)
            invite_link = await chat.export_invite_link()
            buttons.append(
                InlineKeyboardButton(
                    text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat.title}",
                    url=invite_link
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
        buttons.append(InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
            callback_data="check_subscription"
        ))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

        await bot.send_message(
            user_id,
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", f"User {user_id}: {str(e)}")

async def subscription_check_task():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    while True:
        await asyncio.sleep(24 * 3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        log_action("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "–ó–∞–ø—É—â–µ–Ω–æ")

async def normalize_all_ports_forever_for_url(
    url,
    proxy_ports,
    tor_manager,
    timeout_seconds=5,
    max_acceptable_response_time=5.0,
    min_speed_kbps=300
):
    import aiohttp
    import time
    from aiohttp_socks import ProxyConnector

    port_speed_log = {}

    print(f"\nüîÅ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(proxy_ports)} Tor-–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫: {url}\n")

    async def normalize_port_forever(index, port):
        attempt = 0
        while True:
            attempt += 1
            try:
                connector = ProxyConnector.from_url(f'socks5://127.0.0.1:{port}')
                timeout = aiohttp.ClientTimeout(total=timeout_seconds)
                headers = {
                    'User-Agent': 'Mozilla/5.0',
                    'Accept': '*/*',
                    'Referer': 'https://www.youtube.com/'
                }

                print(f"[{port}] üß™ –ü–æ–ø—ã—Ç–∫–∞ #{attempt} ‚Äî HEAD-–∑–∞–ø—Ä–æ—Å...")

                async with aiohttp.ClientSession(connector=connector, timeout=timeout, headers=headers) as session:
                    start_time = time.time()
                    async with session.head(url, allow_redirects=False) as resp:
                        elapsed = time.time() - start_time
                        content_length = resp.headers.get("Content-Length")

                        # üí• –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –±–∞–Ω
                        if resp.status in [403, 429]:
                            print(f"[{port}] üö´ –°—Ç–∞—Ç—É—Å {resp.status} ‚Äî IP –∑–∞–±–∞–Ω–µ–Ω ({elapsed:.2f}s)")
                            await tor_manager.renew_identity(index)
                            print(f"[{port}] üîÑ IP —Å–º–µ–Ω—ë–Ω ‚Üí –ø–æ–≤—Ç–æ—Ä HEAD-–∑–∞–ø—Ä–æ—Å–∞")
                            await asyncio.sleep(2)
                            continue

                        # üí• –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                        if 500 <= resp.status < 600:
                            print(f"[{port}] ‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {resp.status}")
                            await tor_manager.renew_identity(index)
                            print(f"[{port}] üîÑ IP —Å–º–µ–Ω—ë–Ω ‚Üí –ø–æ–≤—Ç–æ—Ä HEAD-–∑–∞–ø—Ä–æ—Å–∞")
                            await asyncio.sleep(2)
                            continue

                        # üê¢ –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        if elapsed > max_acceptable_response_time:
                            print(f"[{port}] üê¢ –ú–µ–¥–ª–µ–Ω–Ω–æ: {elapsed:.2f}s > {max_acceptable_response_time}s")
                            await tor_manager.renew_identity(index)
                            print(f"[{port}] üîÑ IP —Å–º–µ–Ω—ë–Ω ‚Üí –ø–æ–≤—Ç–æ—Ä HEAD-–∑–∞–ø—Ä–æ—Å–∞")
                            await asyncio.sleep(2)
                            continue

                        # üê¢ –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
                        if content_length:
                            try:
                                content_length_bytes = int(content_length)
                                speed_kbps = (content_length_bytes / 1024) / elapsed
                                if speed_kbps < min_speed_kbps:
                                    print(f"[{port}] üêå –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_kbps:.2f} KB/s < {min_speed_kbps} KB/s")
                                    await tor_manager.renew_identity(index)
                                    print(f"[{port}] üîÑ IP —Å–º–µ–Ω—ë–Ω ‚Üí –ø–æ–≤—Ç–æ—Ä HEAD-–∑–∞–ø—Ä–æ—Å–∞")
                                    await asyncio.sleep(2)
                                    continue
                            except Exception:
                                pass

                        # ‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ!
                        print(f"[{port}] ‚úÖ –£—Å–ø–µ—Ö! –°—Ç–∞—Ç—É—Å {resp.status} | –í—Ä–µ–º—è: {elapsed:.2f}s | –ü–æ–ø—ã—Ç–∫–∞ #{attempt}")
                        port_speed_log[port] = elapsed
                        return

            except Exception as e:
                print(f"[{port}] ‚ùå –û—à–∏–±–∫–∞: {e} | –ü–æ–ø—ã—Ç–∫–∞ #{attempt}")
                await tor_manager.renew_identity(index)
                print(f"[{port}] üîÑ IP —Å–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ ‚Üí –ø–æ–≤—Ç–æ—Ä HEAD-–∑–∞–ø—Ä–æ—Å–∞")
                await asyncio.sleep(2)

    await asyncio.gather(*(normalize_port_forever(i, port) for i, port in enumerate(proxy_ports)))

    print("\nüìà –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ HEAD-–∑–∞–ø—Ä–æ—Å–∞–º:")
    for port in sorted(port_speed_log.keys()):
        print(f"‚úÖ –ü–æ—Ä—Ç {port}: {port_speed_log[port]:.2f} —Å–µ–∫")

    return list(port_speed_log.keys()), port_speed_log


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await check_subscription(user_id, force_check=True):
        await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        await send_subscription_reminder(user_id)

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return
    await start(message)

@dp.message(F.text.startswith("http"))
async def handle_url(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return
    await handle_link(message)

@dp.message(lambda message: message.text.lower().endswith("p") or message.text.lower() == "—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ")
async def handle_quality(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –≤ handle_quality_selection
    await handle_quality_selection(message)

async def main():
    yt_url = "https://www.youtube.com/watch?v=-uzC0K3ku5g"  # üîÅ –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å —Å–≤–æ—é —é—Ç—É–±-—Å—Å—ã–ª–∫—É
    downloader = YtDlpDownloader()
    info = await get_video_info_with_cache(yt_url)
    direct_url = await extract_url_from_info(info, ["136"])

    tor_manager = downloader.tor_manager
    proxy_ports = [9050 + i * 2 for i in range(40)]

    log_action(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–æ–≤:")
    await asyncio.sleep(60)
    good_ports = await normalize_all_ports_forever_for_url(direct_url, proxy_ports, tor_manager)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã: {good_ports}")
    asyncio.create_task(subscription_check_task())
    log_action("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


