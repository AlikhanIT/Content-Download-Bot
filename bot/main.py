import asyncio
from datetime import datetime, timedelta

import requests
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.handlers.start_handler import start
from bot.handlers.video_handler import handle_link, handle_quality_selection
from bot.utils.YtDlpDownloader import YtDlpDownloader
from bot.utils.log import log_action
from bot.utils.video_info import check_ffmpeg_installed
from config import bot, dp, CHANNEL_IDS  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CHANNEL_IDS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ config.py

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
user_subscription_cache = {}

async def check_subscription(user_id: int, force_check: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param force_check: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–µ—à)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not force_check and user_id in user_subscription_cache:
            last_check, status = user_subscription_cache[user_id]
            if datetime.now() - last_check < timedelta(minutes=10):
                return status

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_id in CHANNEL_IDS:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                user_subscription_cache[user_id] = (datetime.now(), False)
                return False

        user_subscription_cache[user_id] = (datetime.now(), True)
        return True
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", f"User {user_id}: {str(e)}")
        return False

async def send_subscription_reminder(user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        buttons = []
        for channel_id in CHANNEL_IDS:
            chat = await bot.get_chat(channel_id)
            invite_link = await chat.export_invite_link()
            buttons.append(
                InlineKeyboardButton(
                    text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat.title}",
                    url=invite_link
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
        buttons.append(InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
            callback_data="check_subscription"
        ))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

        await bot.send_message(
            user_id,
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", f"User {user_id}: {str(e)}")

async def subscription_check_task():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    while True:
        await asyncio.sleep(24 * 3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        log_action("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "–ó–∞–ø—É—â–µ–Ω–æ")

async def check_tor_ports_with_rotation(tor_manager, proxy_ports, test_url="https://www.youtube.com/get_video_info",
                                        timeout_seconds=10, required_success_ratio=0.75, max_ip_attempts=5):
    from aiohttp_socks import ProxyConnector
    import aiohttp
    import time

    good_ports = []

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Tor –ø–æ—Ä—Ç–æ–≤ —Å IP-—Ä–æ—Ç–∞—Ü–∏–µ–π...")

    async def check_and_fix_port(index, port):
        for attempt in range(max_ip_attempts):
            try:
                connector = ProxyConnector.from_url(f'socks5://127.0.0.1:{port}')
                timeout = aiohttp.ClientTimeout(total=timeout_seconds)
                headers = {'User-Agent': 'Mozilla/5.0'}

                async with aiohttp.ClientSession(connector=connector, timeout=timeout, headers=headers) as session:
                    start_time = time.time()
                    async with session.head(test_url, allow_redirects=True) as response:
                        elapsed = time.time() - start_time

                        if response.status in [403, 429] or 500 <= response.status < 600:
                            print(f"üö´ –ü–æ—Ä—Ç {port}, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}: —Å—Ç–∞—Ç—É—Å {response.status}, –ø—Ä–æ–±—É–µ–º —Å–º–µ–Ω–∏—Ç—å IP")
                            await tor_manager.renew_identity(index)
                            await asyncio.sleep(3)
                            continue

                        if elapsed > 5:
                            print(f"üêå –ü–æ—Ä—Ç {port}, —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ: {elapsed:.2f} —Å–µ–∫, —Å–º–µ–Ω–∞ IP")
                            await tor_manager.renew_identity(index)
                            await asyncio.sleep(2)
                            continue

                        print(f"‚úÖ –ü–æ—Ä—Ç {port} —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å {response.status}, –≤—Ä–µ–º—è {elapsed:.2f} —Å–µ–∫")
                        return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}: {e}")
                await tor_manager.renew_identity(index)
                await asyncio.sleep(2)
        print(f"‚ùå –ü–æ—Ä—Ç {port} –∏—Å–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ {max_ip_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    results = await asyncio.gather(*(check_and_fix_port(i, port) for i, port in enumerate(proxy_ports)))
    for i, ok in enumerate(results):
        if ok:
            good_ports.append(proxy_ports[i])

    ratio = len(good_ports) / len(proxy_ports)
    print(f"üìä –†–∞–±–æ—á–∏—Ö –ø–æ—Ä—Ç–æ–≤: {len(good_ports)}/{len(proxy_ports)} ({ratio*100:.1f}%)")

    if ratio < required_success_ratio:
        raise RuntimeError(f"‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ä—Ç–æ–≤: {ratio*100:.1f}% < {required_success_ratio*100:.1f}%")

    return good_ports

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await check_subscription(user_id, force_check=True):
        await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        await send_subscription_reminder(user_id)

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return
    await start(message)

@dp.message(F.text.startswith("http"))
async def handle_url(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return
    await handle_link(message)

@dp.message(lambda message: message.text.lower().endswith("p") or message.text.lower() == "—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ")
async def handle_quality(message: types.Message):
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –≤ handle_quality_selection
    await handle_quality_selection(message)

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tor-–ø—Ä–æ–∫—Å–∏
    downloader = YtDlpDownloader()
    tor_manager = downloader.tor_manager
    proxy_ports = [9050 + i * 2 for i in range(40)]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    working_ports = await check_tor_ports_with_rotation(tor_manager, proxy_ports)
    asyncio.create_task(subscription_check_task())
    log_action("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


