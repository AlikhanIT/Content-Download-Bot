import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, Tuple, List

from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Dispatcher, Bot

from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.telegram import TelegramAPIServer

# -------------------- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è -------------------- #
API_TOKEN = os.getenv("API_TOKEN", "").strip()
if not API_TOKEN:
    raise RuntimeError("API_TOKEN is not set")

LOCAL_API_URL = os.getenv("LOCAL_API_URL", "http://telegram_bot_api:8081").strip()

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ @username)
# –ü—Ä–∏–º–µ—Ä—ã: "-1001234567890,@mychannel"
_channel_env = os.getenv("CHANNEL_IDS", "").strip()
def parse_channels(raw: str) -> List[str]:
    if not raw:
        return []
    return [c.strip() for c in raw.split(",") if c.strip()]
CHANNEL_IDS: List[str] = parse_channels(_channel_env)

# -------------------- –õ–æ–≥–≥–µ—Ä (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π) -------------------- #
def log_action(title: str, details: str = ""):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] {title}: {details}")

# -------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ -------------------- #
user_subscription_cache: Dict[int, Tuple[datetime, bool]] = {}  # user_id -> (last_check, status)
current_links: Dict[int, str] = {}  # user_id -> pending url
downloading_status: Dict[int, str] = {}  # user_id -> status

# -------------------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Bot API -------------------- #
# aiogram v3: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π endpoint
server = TelegramAPIServer.from_base(LOCAL_API_URL)
session = AiohttpSession(api=server)
bot = Bot(token=API_TOKEN, session=session, parse_mode="HTML")
dp = Dispatcher()


# -------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ -------------------- #
async def check_subscription(user_id: int, force_check: bool = False) -> bool:
    """
    True -> –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–ª—å–∑—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    False -> —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    """
    try:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        if not CHANNEL_IDS:
            return True

        if not force_check and user_id in user_subscription_cache:
            last_check, status = user_subscription_cache[user_id]
            if datetime.now() - last_check < timedelta(minutes=10):
                return status

        for channel_id in CHANNEL_IDS:
            try:
                chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                if chat_member.status not in ('member', 'administrator', 'creator'):
                    user_subscription_cache[user_id] = (datetime.now(), False)
                    return False
            except Exception as e:
                # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–Ω–µ –≤ –∫–∞–Ω–∞–ª–µ/–Ω–µ—Ç –ø—Ä–∞–≤) ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                log_action("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏", f"{channel_id=} {e}")
                user_subscription_cache[user_id] = (datetime.now(), True)
                return True

        user_subscription_cache[user_id] = (datetime.now(), True)
        return True

    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)", f"User {user_id}: {e}")
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        return True


async def send_subscription_reminder(user_id: int):
    """
    –®–ª—ë–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ export_invite_link ‚Äî –¥–∞—ë–º t.me —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å username).
    """
    try:
        if not CHANNEL_IDS:
            return

        rows = []
        for channel_id in CHANNEL_IDS:
            try:
                chat = await bot.get_chat(channel_id)
                # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞)
                try:
                    invite_link = await chat.export_invite_link()
                    url = invite_link
                except Exception:
                    if chat.username:
                        url = f"https://t.me/{chat.username}"
                    else:
                        url = None

                text = f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chat.title}"
                if url:
                    rows.append([InlineKeyboardButton(text=text, url=url)])
                else:
                    rows.append([InlineKeyboardButton(
                        text=f"üì¢ {chat.title} (–¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞)",
                        callback_data="noop"
                    )])

            except Exception as e:
                log_action("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –∫–∞–Ω–∞–ª–∞", f"{channel_id=} {e}")

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏
        rows.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        await bot.send_message(
            user_id,
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard
        )
    except Exception as e:
        log_action("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", f"User {user_id}: {e}")


# -------------------- UI –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ -------------------- #
def build_quality_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="360p", callback_data="quality_360p"),
            InlineKeyboardButton(text="480p", callback_data="quality_480p"),
        ],
        [
            InlineKeyboardButton(text="720p", callback_data="quality_720p"),
            InlineKeyboardButton(text="1080p", callback_data="quality_1080p"),
        ],
        [
            InlineKeyboardButton(text="üîä –ê—É–¥–∏–æ", callback_data="quality_audio"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# -------------------- –•–µ–Ω–¥–ª–µ—Ä—ã -------------------- #
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await check_subscription(user_id, force_check=True):
        await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        await send_subscription_reminder(user_id)


@dp.message(Command("ping"))
async def ping_cmd(message: types.Message):
    await message.answer("pong")


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    log_action("HANDLE /start", f"from={message.from_user.id}")
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É (YouTube, –∏ —Ç.–ø.), –∞ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞.\n"
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏ /ping"
    )


@dp.message(F.text.startswith("http"))
async def handle_url(message: types.Message):
    log_action("HANDLE URL", f"from={message.from_user.id} text={message.text[:120]}")
    if not await check_subscription(message.from_user.id, force_check=True):
        await send_subscription_reminder(message.from_user.id)
        return

    url = message.text.strip()
    current_links[message.from_user.id] = url

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=build_quality_keyboard()
    )


@dp.callback_query(lambda c: c.data.startswith("quality_"))
async def video_quality_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if not await check_subscription(user_id, force_check=True):
        await send_subscription_reminder(user_id)
        return

    data = callback_query.data.replace("quality_", "")
    if data == "audio":
        download_type = "audio"
        quality = "0"
    else:
        download_type = "video"
        quality = data.replace("p", "")

    url = current_links.pop(user_id, None)
    if not url:
        await callback_query.message.edit_text("‚ùå –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    await callback_query.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {download_type} {quality}p\n{url}")

    # ---- –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞–π–ø–ª–∞–π–Ω) ---- #
    try:
        downloading_status[user_id] = "running"
        await asyncio.sleep(2.0)  # –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
        if downloading_status.get(user_id) == "cancelled":
            await callback_query.message.answer("üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            downloading_status[user_id] = "idle"
            return

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞/–∞—É–¥–∏–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞‚Ä¶
        await callback_query.message.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ (–¥–µ–º–æ). –¢–∏–ø: {download_type}, –∫–∞—á–µ—Å—Ç–≤–æ: {quality}p\nURL: {url}"
        )
        downloading_status[user_id] = "idle"
    except Exception as e:
        downloading_status[user_id] = "idle"
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_download(call: CallbackQuery):
    user_id = call.from_user.id
    downloading_status[user_id] = "cancelled"
    await call.message.edit_text("üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# -------------------- –ë—ç–∫–≥—Ä–∞—É–Ω–¥-–∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) -------------------- #
async def subscription_check_task():
    while True:
        await asyncio.sleep(24 * 3600)
        log_action("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "–ó–∞–ø—É—â–µ–Ω–æ")


# -------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -------------------- #
async def main():
    # –õ—é–±–∞—è —Ç–≤–æ—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(subscription_check_task())
    log_action("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", f"LOCAL_API_URL={LOCAL_API_URL}")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
