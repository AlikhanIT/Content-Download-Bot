import requests
import time
import random
import re
from bot.utils.log import log_action

# –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–∫—Å–∏
PROXY_FILE = "proxies.txt"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏
CHECK_INTERVAL = 30  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
BAN_TIME = 36000  # –í—Ä–µ–º—è –±–∞–Ω–∞ (15 –º–∏–Ω—É—Ç)
MAX_REQUESTS_PER_PROXY = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –ø—Ä–æ–∫—Å–∏

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∫—Å–∏
proxies = []
banned_proxies = {}  # { "ip:port": {"banned_at": timestamp, "unban_at": timestamp} }
proxy_usage_count = {}


def ban_proxy(proxy_url):
    """ –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è IP –∏ –ø–æ—Ä—Ç–∞
    match = re.match(r'http://(?:.*):(?:.*)@([^:]+):(\d+)', proxy_url)
    if match:
        ip = match.group(1)
        port = match.group(2)
        proxy_key = f"{ip}:{port}"

        banned_proxies[proxy_key] = {
            "banned_at": time.time(),
            "unban_at": time.time() + BAN_TIME
        }

        log_action(f"üö´ –ü—Ä–æ–∫—Å–∏ {proxy_key} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {BAN_TIME // 60} –º–∏–Ω—É—Ç.")
    else:
        log_action(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IP –∏ –ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ–∫—Å–∏ URL: {proxy_url}")

def load_proxies():
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ """
    global proxies
    proxies = []
    try:
        with open(PROXY_FILE, "r") as f:
            for line in f:
                parts = line.strip().split(":")
                if len(parts) == 4:
                    ip, port, user, password = parts
                    proxies.append({
                        "ip": ip,
                        "port": port,
                        "user": user,
                        "password": password
                    })
    except FileNotFoundError:
        print(f"–§–∞–π–ª {PROXY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏.")
    return proxies


def check_proxy(proxy):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ–∫—Å–∏ """
    ip, port, user, password = proxy["ip"], proxy["port"], proxy["user"], proxy["password"]
    proxy_url = f"http://{user}:{password}@{ip}:{port}"

    try:
        response = requests.get("http://www.google.com", proxies={"http": proxy_url, "https": proxy_url}, timeout=5)
        return response.status_code == 200
    except requests.RequestException:
        return False


def refresh_proxies():
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏, —É–¥–∞–ª—è—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ """
    global proxies
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏...")
    new_proxies = []
    for proxy in proxies:
        proxy_key = f"{proxy['ip']}:{proxy['port']}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–±–∞–Ω–∏–ª—Å—è –ª–∏ –ø—Ä–æ–∫—Å–∏
        if proxy_key in banned_proxies:
            if time.time() >= banned_proxies[proxy_key]["unban_at"]:
                print(f"–ü—Ä–æ–∫—Å–∏ {proxy_key} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
                del banned_proxies[proxy_key]  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∞
                new_proxies.append(proxy)
        else:
            if check_proxy(proxy):
                new_proxies.append(proxy)

    proxies = new_proxies
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏.")



def get_available_proxy():
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (—Å —É—á–µ—Ç–æ–º –±–∞–Ω–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤) """
    global proxies, banned_proxies, proxy_usage_count

    if not proxies:
        return None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    current_time = time.time()
    available_proxies = [
        proxy for proxy in proxies if f"{proxy['ip']}:{proxy['port']}" not in banned_proxies or
                                      current_time >= banned_proxies[f"{proxy['ip']}:{proxy['port']}"]["unban_at"]
    ]

    if not available_proxies:
        return None

    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
    proxy = min(available_proxies, key=lambda p: proxy_usage_count.get(f"{p['ip']}:{p['port']}", 0))
    proxy_key = f"{proxy['ip']}:{proxy['port']}"

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    proxy_usage_count[proxy_key] = proxy_usage_count.get(proxy_key, 0) + 1

    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –≤—Ä–µ–º–µ–Ω–Ω–æ –µ–≥–æ –±–∞–Ω–∏–º
    if proxy_usage_count[proxy_key] >= MAX_REQUESTS_PER_PROXY:
        banned_proxies[proxy_key] = {
            "banned_at": time.time(),
            "unban_at": time.time() + BAN_TIME
        }
        proxy_usage_count[proxy_key] = 0  # –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫

    return proxy


def get_proxy_status():
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏, –≤–∫–ª—é—á–∞—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è """
    status = []
    for proxy in proxies:
        proxy_key = f"{proxy['ip']}:{proxy['port']}"
        if proxy_key in banned_proxies:
            status.append({
                "ip": proxy["ip"],
                "port": proxy["port"],
                "status": "BANNED",
                "banned_at": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(banned_proxies[proxy_key]["banned_at"])),
                "unban_at": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(banned_proxies[proxy_key]["unban_at"]))
            })
        else:
            status.append({
                "ip": proxy["ip"],
                "port": proxy["port"],
                "status": "ACTIVE"
            })
    return status


