#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import platform
import stat
import uuid
import subprocess
import asyncio
import time
from functools import cached_property

import aiofiles
from fake_useragent import UserAgent
from tqdm import tqdm

from bot.utils.video_info import get_video_info_with_cache, extract_url_from_info
from bot.utils.log import log_action


class PortPool:
    def __init__(self, ports):
        self._ports = ports[:]
        self._current_index = 0
        self._lock = asyncio.Lock()

    async def get_next_port(self):
        async with self._lock:
            port = self._ports[self._current_index]
            self._current_index = (self._current_index + 1) % len(self._ports)
            return port


class YtDlpDownloader:
    _instance = None
    DOWNLOAD_DIR = '/downloads'
    QUALITY_ITAG_MAP = {
        "144": "160", "240": "133", "360": "134", "480": "135",
        "720": "136", "1080": "137", "1440": "264", "2160": "266"
    }
    DEFAULT_VIDEO_ITAG = "243"
    DEFAULT_AUDIO_ITAG = "249"
    MAX_RETRIES = 10

    def __new__(cls, max_threads=8, max_queue_size=20):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialize(max_threads, max_queue_size)
            cls._instance._ensure_download_dir()
        return cls._instance

    def _initialize(self, max_threads, max_queue_size):
        self.max_threads = max_threads
        self.queue = asyncio.Queue(maxsize=max_queue_size)
        self.is_running = False
        self.active_tasks = set()
        # –ü—Ä–æ—Å—Ç–æ–π round-robin –ø—É–ª –ø–æ—Ä—Ç–æ–≤
        self.port_pool = PortPool([9050 + i * 2 for i in range(20)])

    def _ensure_download_dir(self):
        os.makedirs(self.DOWNLOAD_DIR, exist_ok=True)
        log_action(f"üìÇ –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {self.DOWNLOAD_DIR}")

    @cached_property
    def user_agent(self):
        return UserAgent()

    async def start_workers(self):
        if not self.is_running:
            self.is_running = True
            for _ in range(self.max_threads):
                task = asyncio.create_task(self._worker())
                self.active_tasks.add(task)
                task.add_done_callback(self.active_tasks.discard)

    async def download(self, url, download_type="video", quality="480", progress_msg=None):
        start_time = time.time()
        await self.start_workers()
        loop = asyncio.get_event_loop()
        future = loop.create_future()
        await self.queue.put((url, download_type, quality, future, progress_msg))
        result = await future
        try:
            size = os.path.getsize(result)
            duration = time.time() - start_time
            avg = size / duration if duration > 0 else 0
            log_action(f"üìä Finished: {size / 1024 / 1024:.2f} MB in {duration:.2f}s ({avg / 1024 / 1024:.2f} MB/s)")
        except Exception:
            pass
        return result

    async def _worker(self):
        while True:
            url, download_type, quality, future, progress_msg = await self.queue.get()
            try:
                res = await self._process_download(url, download_type, quality, progress_msg)
                future.set_result(res)
            except Exception as e:
                future.set_exception(e)
            finally:
                self.queue.task_done()

    async def _process_download(self, url, download_type, quality, progress_msg):
        start_proc = time.time()
        file_paths = await self._prepare_file_paths(download_type)
        result = None

        try:
            info = await get_video_info_with_cache(url)

            if download_type == "audio":
                audio_url = await extract_url_from_info(info, [self.DEFAULT_AUDIO_ITAG])
                result = await self._download_with_tordl(audio_url, file_paths['audio'], 'audio', progress_msg)
            else:
                itag = self.QUALITY_ITAG_MAP.get(str(quality), self.DEFAULT_VIDEO_ITAG)
                video_url, audio_url = await asyncio.gather(
                    extract_url_from_info(info, [itag]),
                    extract_url_from_info(info, [self.DEFAULT_AUDIO_ITAG])
                )
                await asyncio.gather(
                    self._download_with_tordl(video_url, file_paths['video'], 'video', progress_msg),
                    self._download_with_tordl(audio_url, file_paths['audio'], 'audio', progress_msg)
                )
                result = await self._merge_files(file_paths)

            return result
        finally:
            try:
                size = os.path.getsize(result) if result and os.path.exists(result) else 0
                duration = time.time() - start_proc
                avg = size / duration if duration > 0 else 0
                log_action(
                    f"üìà Process: {download_type.upper()} {size / 1024 / 1024:.2f} MB in {duration:.2f}s ({avg / 1024 / 1024:.2f} MB/s)")
            except Exception:
                pass
            if download_type != 'audio':
                await self._cleanup_temp_files(file_paths)

    async def _prepare_file_paths(self, download_type):
        rnd = uuid.uuid4()
        base = {'output': os.path.join(self.DOWNLOAD_DIR, f"{rnd}.mp4")}
        if download_type == 'audio':
            base['audio'] = os.path.join(self.DOWNLOAD_DIR, f"{rnd}.m4a")
        else:
            base['video'] = os.path.join(self.DOWNLOAD_DIR, f"{rnd}_video.mp4")
            base['audio'] = os.path.join(self.DOWNLOAD_DIR, f"{rnd}_audio.m4a")
        return base

    async def _download_with_tordl(self, url, filename, media_type, progress_msg):
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ tor-dl —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
        attempts = 0
        max_attempts = 3

        while attempts < max_attempts:
            attempts += 1
            port = await self.port_pool.get_next_port()

            log_action(f"üöÄ {media_type.upper()} —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç {port} (–ø–æ–ø—ã—Ç–∫–∞ {attempts})")

            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if platform.system() == 'Windows':
                executable = './tor-dl.exe'
            else:
                executable = './tor-dl'

            if not os.path.isfile(executable):
                raise FileNotFoundError(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {executable}")

            if not os.access(executable, os.X_OK):
                os.chmod(executable, os.stat(executable).st_mode | stat.S_IEXEC)
                log_action(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–¥–∞–Ω—ã: {executable}")

            if not os.access(executable, os.X_OK):
                raise PermissionError(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {executable}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(executable):
                raise FileNotFoundError(f"tor-dl executable not found: {executable}")

            cmd = [
                executable,
                '--tor-port', str(port),
                '--name', os.path.basename(filename),
                '--destination', os.path.dirname(filename),
                '--circuits', '50',
                '--min-lifetime', '1',
                '--force',
                '--silent',
                url
            ]

            start_time = time.time()

            proc = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.DEVNULL
            )

            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            monitor_task = asyncio.create_task(
                self._aggressive_monitor(proc, filename, start_time, media_type)
            )

            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                done, pending = await asyncio.wait(
                    [asyncio.create_task(proc.wait()), monitor_task],
                    return_when=asyncio.FIRST_COMPLETED
                )

                # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for task in pending:
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass

                # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                if proc.returncode is None:
                    proc.kill()
                    try:
                        await asyncio.wait_for(proc.wait(), timeout=2)
                    except:
                        pass

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if os.path.exists(filename) and os.path.getsize(filename) > 0:
                    size = os.path.getsize(filename)
                    duration = time.time() - start_time
                    speed = size / duration if duration > 0 else 0

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∞–ª—Å—è
                    if self._is_download_complete(filename, media_type):
                        log_action(
                            f"‚úÖ {media_type.upper()}: {size / 1024 / 1024:.1f}MB –∑–∞ {duration:.1f}s ({speed / 1024 / 1024:.1f} MB/s)")
                        return filename
                    else:
                        log_action(f"‚ö†Ô∏è {media_type.upper()}: –Ω–µ–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        continue

            except Exception as e:
                log_action(f"‚ùå –û—à–∏–±–∫–∞ {media_type} –ø–æ–ø—ã—Ç–∫–∞ {attempts}: {e}")
                if proc.returncode is None:
                    proc.kill()

            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(1)

        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {media_type} –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")

    def _is_download_complete(self, filename, media_type):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∞–ª—Å—è"""
        try:
            size = os.path.getsize(filename)
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            min_audio_size = 1 * 1024 * 1024  # 1MB –¥–ª—è –∞—É–¥–∏–æ
            min_video_size = 10 * 1024 * 1024  # 10MB –¥–ª—è –≤–∏–¥–µ–æ

            if media_type == 'audio':
                return size >= min_audio_size
            else:
                return size >= min_video_size
        except:
            return False

    async def _aggressive_monitor(self, proc, filename, start_time, media_type):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –±—ã—Å—Ç—Ä—ã–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏—è"""
        last_size = 0
        last_change_time = start_time
        stall_threshold = 30  # 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π = –∑–∞–≤–∏—Å–∞–Ω–∏–µ
        check_interval = 3  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        log_interval = 15  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        last_log_time = start_time

        while proc.returncode is None:
            try:
                await asyncio.sleep(check_interval)
                current_time = time.time()

                if not os.path.exists(filename):
                    continue

                current_size = os.path.getsize(filename)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if current_size > last_size:
                    last_size = current_size
                    last_change_time = current_time

                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if current_time - last_log_time >= log_interval:
                        elapsed = current_time - start_time
                        speed = current_size / elapsed if elapsed > 0 else 0
                        log_action(
                            f"üìä {media_type}: {current_size / 1024 / 1024:.0f}MB | {speed / 1024 / 1024:.1f} MB/s")
                        last_log_time = current_time
                else:
                    # –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏–µ
                    stall_time = current_time - last_change_time
                    if stall_time > stall_threshold:
                        log_action(f"üîÑ {media_type}: –∑–∞–≤–∏—Å–∞–Ω–∏–µ {stall_time:.0f}—Å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

            except asyncio.CancelledError:
                break
            except Exception:
                pass

    async def _merge_files(self, file_paths):
        log_action("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ...")
        cmd = [
            'ffmpeg', '-i', file_paths['video'], '-i', file_paths['audio'],
            '-c:v', 'copy', '-c:a', 'copy', '-map', '0:v:0', '-map', '1:a:0',
            '-y', file_paths['output']
        ]
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        out, err = await proc.communicate()
        if proc.returncode != 0:
            log_action(f"‚ùå FFmpeg error {proc.returncode}: {err.decode()}")
            raise subprocess.CalledProcessError(proc.returncode, cmd, out, err)
        log_action(f"‚úÖ Output: {file_paths['output']}")
        return file_paths['output']

    async def _cleanup_temp_files(self, file_paths):
        for key in ['video', 'audio']:
            fp = file_paths.get(key)
            if fp and os.path.exists(fp):
                os.remove(fp)
                log_action(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {fp}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        if self.is_running:
            self.is_running = False
            for task in self.active_tasks:
                task.cancel()
            await asyncio.gather(*self.active_tasks, return_exceptions=True)
            log_action("üõë –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def safe_log(msg):
    tqdm.write(msg)
    log_action(msg)