import asyncio
import subprocess
import json
import requests
from PIL import Image
import io
from bot.utils.log import log_action


# üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ range –≤ URL –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
def add_range_to_url(stream_url, clen):
    return f"{stream_url}&range=0-{clen}"


# üì¶ –ü–æ–ª—É—á–∞–µ–º 'clen' –∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π yt-dlp
async def get_clen(url):
    try:
        command = [
            "yt-dlp",
            "-j",  # –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            "--skip-download",
            url
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        info_dict = json.loads(result.stdout)

        formats = info_dict.get('formats', [])
        for fmt in formats:
            clen = fmt.get('filesize') or fmt.get('filesize_approx') or fmt.get('clen')
            if clen:
                return int(clen)  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

        log_action("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 'clen' –∏–ª–∏ 'filesize'.")
        return None

    except Exception as e:
        log_action(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è 'clen': {e}")
        return None


# üìπ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
async def get_video_resolutions_and_sizes(url):
    try:
        command = [
            "yt-dlp",
            "-j",
            "--skip-download",
            url
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        info_dict = json.loads(result.stdout)

        formats = info_dict.get("formats", [])
        resolution_sizes = {}
        max_audio_size = 0
        is_vertical_video = False

        for fmt in formats:
            width = fmt.get("width")
            height = fmt.get("height")
            filesize = fmt.get("filesize")

            if width and height and filesize:
                if width < height:
                    is_vertical_video = True

                filesize_mb = float(filesize) / (1024 * 1024)
                resolution = f"{width}x{height}"
                resolution_sizes[resolution] = max(resolution_sizes.get(resolution, 0), filesize_mb)

        if is_vertical_video:
            resolution_sizes = {}

        for fmt in formats:
            if fmt.get("vcodec") == "none":
                filesize = fmt.get("filesize")
                if filesize:
                    filesize_mb = float(filesize) / (1024 * 1024)
                    max_audio_size = max(max_audio_size, filesize_mb)

        if max_audio_size > 0:
            for resolution in resolution_sizes:
                resolution_sizes[resolution] += max_audio_size

        return resolution_sizes

    except Exception as e:
        log_action(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤–∏–¥–µ–æ: {e}")
        return {}


# üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—å—é
async def get_thumbnail_bytes(url):
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            img = Image.open(io.BytesIO(response.content))
            img = img.convert("RGB")
            img.thumbnail((320, 320))
            byte_io = io.BytesIO()
            img.save(byte_io, format="JPEG", optimize=True, quality=85)
            byte_io.seek(0)
            return byte_io
        return None
    except Exception as e:
        log_action(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: {e}")
        return None


# üìÑ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ (ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–µ–≤—å—é)
async def get_video_info(url):
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É yt-dlp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        command = [
            "yt-dlp",
            "--dump-json",  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
            "--socket-timeout", "60",  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            "--retries", "10",         # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —Å–±–æ–µ
            url
        ]

        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            log_action(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {stderr.decode().strip()}")
            return None, None, None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not stdout:
            log_action("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç yt-dlp")
            return None, None, None

        # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
        info_dict = json.loads(stdout.decode())
        video_id = info_dict.get("id")
        title = info_dict.get("title", "–í–∏–¥–µ–æ")
        thumbnail_url = info_dict.get("thumbnail")

        return video_id, title, thumbnail_url

    except json.JSONDecodeError as e:
        log_action(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None, None, None

    except Exception as e:
        log_action(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None, None, None
